/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DAppNodePackageDirectoryInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "changeHatchEscapeCaller(address)": FunctionFragment;
    "changeOwnership(address)": FunctionFragment;
    "escapeHatch(address)": FunctionFragment;
    "escapeHatchCaller()": FunctionFragment;
    "escapeHatchDestination()": FunctionFragment;
    "featured()": FunctionFragment;
    "isTokenEscapable(address)": FunctionFragment;
    "newOwnerCandidate()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeOwnership(address)": FunctionFragment;
    "removeOwnership(address)": FunctionFragment;
    "addPackage(string,uint128,uint128)": FunctionFragment;
    "updatePackage(uint256,string,uint128,uint128)": FunctionFragment;
    "changeStatus(uint256,uint128)": FunctionFragment;
    "changePosition(uint256,uint128)": FunctionFragment;
    "switchPosition(uint256,uint256)": FunctionFragment;
    "changeFeatured(bytes32)": FunctionFragment;
    "getPackage(uint256)": FunctionFragment;
    "numberOfDAppNodePackages()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "changeHatchEscapeCaller"
      | "changeOwnership"
      | "escapeHatch"
      | "escapeHatchCaller"
      | "escapeHatchDestination"
      | "featured"
      | "isTokenEscapable"
      | "newOwnerCandidate"
      | "owner"
      | "proposeOwnership"
      | "removeOwnership"
      | "addPackage"
      | "updatePackage"
      | "changeStatus"
      | "changePosition"
      | "switchPosition"
      | "changeFeatured"
      | "getPackage"
      | "numberOfDAppNodePackages"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeHatchEscapeCaller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "escapeHatch",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "escapeHatchCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escapeHatchDestination",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "featured", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTokenEscapable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newOwnerCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPackage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePackage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changePosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "switchPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeatured",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPackage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfDAppNodePackages",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeHatchEscapeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escapeHatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escapeHatchCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escapeHatchDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "featured", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenEscapable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOwnerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPackage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeatured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPackage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfDAppNodePackages",
    data: BytesLike
  ): Result;

  events: {
    "EscapeHatchBlackistedToken(address)": EventFragment;
    "EscapeHatchCalled(address,uint256)": EventFragment;
    "FeaturedChanged(bytes32)": EventFragment;
    "OwnershipRemoved()": EventFragment;
    "OwnershipRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PackageAdded(uint256,string)": EventFragment;
    "PackageUpdated(uint256,string)": EventFragment;
    "PositionChanged(uint256,uint128)": EventFragment;
    "StatusChanged(uint256,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscapeHatchBlackistedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscapeHatchCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeaturedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusChanged"): EventFragment;
}

export interface EscapeHatchBlackistedTokenEventObject {
  token: string;
}
export type EscapeHatchBlackistedTokenEvent = TypedEvent<
  [string],
  EscapeHatchBlackistedTokenEventObject
>;

export type EscapeHatchBlackistedTokenEventFilter =
  TypedEventFilter<EscapeHatchBlackistedTokenEvent>;

export interface EscapeHatchCalledEventObject {
  token: string;
  amount: BigNumber;
}
export type EscapeHatchCalledEvent = TypedEvent<
  [string, BigNumber],
  EscapeHatchCalledEventObject
>;

export type EscapeHatchCalledEventFilter =
  TypedEventFilter<EscapeHatchCalledEvent>;

export interface FeaturedChangedEventObject {
  newFeatured: string;
}
export type FeaturedChangedEvent = TypedEvent<
  [string],
  FeaturedChangedEventObject
>;

export type FeaturedChangedEventFilter = TypedEventFilter<FeaturedChangedEvent>;

export interface OwnershipRemovedEventObject {}
export type OwnershipRemovedEvent = TypedEvent<[], OwnershipRemovedEventObject>;

export type OwnershipRemovedEventFilter =
  TypedEventFilter<OwnershipRemovedEvent>;

export interface OwnershipRequestedEventObject {
  by: string;
  to: string;
}
export type OwnershipRequestedEvent = TypedEvent<
  [string, string],
  OwnershipRequestedEventObject
>;

export type OwnershipRequestedEventFilter =
  TypedEventFilter<OwnershipRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PackageAddedEventObject {
  idPackage: BigNumber;
  name: string;
}
export type PackageAddedEvent = TypedEvent<
  [BigNumber, string],
  PackageAddedEventObject
>;

export type PackageAddedEventFilter = TypedEventFilter<PackageAddedEvent>;

export interface PackageUpdatedEventObject {
  idPackage: BigNumber;
  name: string;
}
export type PackageUpdatedEvent = TypedEvent<
  [BigNumber, string],
  PackageUpdatedEventObject
>;

export type PackageUpdatedEventFilter = TypedEventFilter<PackageUpdatedEvent>;

export interface PositionChangedEventObject {
  idPackage: BigNumber;
  newPosition: BigNumber;
}
export type PositionChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PositionChangedEventObject
>;

export type PositionChangedEventFilter = TypedEventFilter<PositionChangedEvent>;

export interface StatusChangedEventObject {
  idPackage: BigNumber;
  newStatus: BigNumber;
}
export type StatusChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StatusChangedEventObject
>;

export type StatusChangedEventFilter = TypedEventFilter<StatusChangedEvent>;

export interface DAppNodePackageDirectory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAppNodePackageDirectoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Changes the address assigned to call `escapeHatch()`
     * @param _newEscapeHatchCaller The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`
     */
    changeHatchEscapeCaller(
      _newEscapeHatchCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened
     * @param _token to transfer, use 0x0 for ether
     */
    escapeHatch(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escapeHatchCaller(overrides?: CallOverrides): Promise<[string]>;

    escapeHatchDestination(overrides?: CallOverrides): Promise<[string]>;

    featured(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Checks to see if `_token` is in the blacklist of tokens
     * @param _token the token address being queried
     * @returns False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`
     */
    isTokenEscapable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newOwnerCandidate(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Add a new DAppNode package
     * @param name the ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     * @returns the idPackage of the new package
     */
    addPackage(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param name the new ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     */
    updatePackage(
      idPackage: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newStatus the new status of the package
     */
    changeStatus(
      idPackage: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newPosition position to order the packages in the UI
     */
    changePosition(
      idPackage: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Switch the positio of two DAppNode packages
     * @param idPackage1 the id of the package to be switched
     * @param idPackage2 the id of the package to be switched
     */
    switchPosition(
      idPackage1: PromiseOrValue<BigNumberish>,
      idPackage2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Change the list of featured packages
     * @param _featured List of the ids of the featured packages if needed ids [5,43]: _featured = 0x052b0000000000000...
     */
    changeFeatured(
      _featured: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the information of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @returns name the new name of the packagestatus the status of the package
     */
    getPackage(
      idPackage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        name: string;
        status: BigNumber;
        position: BigNumber;
      }
    >;

    /**
     * its goal is to return the total number of DAppNode packages
     * @returns the total number of DAppNode packages
     */
    numberOfDAppNodePackages(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  /**
   * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
   */
  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Changes the address assigned to call `escapeHatch()`
   * @param _newEscapeHatchCaller The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`
   */
  changeHatchEscapeCaller(
    _newEscapeHatchCaller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
   * `owner` can step down and assign some other address to this role
   * @param _newOwner The address of the new owner
   */
  changeOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened
   * @param _token to transfer, use 0x0 for ether
   */
  escapeHatch(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escapeHatchCaller(overrides?: CallOverrides): Promise<string>;

  escapeHatchDestination(overrides?: CallOverrides): Promise<string>;

  featured(overrides?: CallOverrides): Promise<string>;

  /**
   * Checks to see if `_token` is in the blacklist of tokens
   * @param _token the token address being queried
   * @returns False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`
   */
  isTokenEscapable(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newOwnerCandidate(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
   * `onlyOwner` Proposes to transfer control of the contract to a  new owner
   * @param _newOwnerCandidate The address being proposed as the new owner
   */
  proposeOwnership(
    _newOwnerCandidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
   * Decentralizes the contract, this operation cannot be undone
   * @param _dac `0xdac` has to be entered for this function to work
   */
  removeOwnership(
    _dac: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Add a new DAppNode package
   * @param name the ENS name of the package
   * @param position to order the packages in the UI
   * @param status status of the package
   * @returns the idPackage of the new package
   */
  addPackage(
    name: PromiseOrValue<string>,
    status: PromiseOrValue<BigNumberish>,
    position: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update a DAppNode package
   * @param idPackage the id of the package to be changed
   * @param name the new ENS name of the package
   * @param position to order the packages in the UI
   * @param status status of the package
   */
  updatePackage(
    idPackage: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    status: PromiseOrValue<BigNumberish>,
    position: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Change the status of a DAppNode package
   * @param idPackage the id of the package to be changed
   * @param newStatus the new status of the package
   */
  changeStatus(
    idPackage: PromiseOrValue<BigNumberish>,
    newStatus: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Change the status of a DAppNode package
   * @param idPackage the id of the package to be changed
   * @param newPosition position to order the packages in the UI
   */
  changePosition(
    idPackage: PromiseOrValue<BigNumberish>,
    newPosition: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Switch the positio of two DAppNode packages
   * @param idPackage1 the id of the package to be switched
   * @param idPackage2 the id of the package to be switched
   */
  switchPosition(
    idPackage1: PromiseOrValue<BigNumberish>,
    idPackage2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Change the list of featured packages
   * @param _featured List of the ids of the featured packages if needed ids [5,43]: _featured = 0x052b0000000000000...
   */
  changeFeatured(
    _featured: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the information of a DAppNode package
   * @param idPackage the id of the package to be changed
   * @returns name the new name of the packagestatus the status of the package
   */
  getPackage(
    idPackage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      name: string;
      status: BigNumber;
      position: BigNumber;
    }
  >;

  /**
   * its goal is to return the total number of DAppNode packages
   * @returns the total number of DAppNode packages
   */
  numberOfDAppNodePackages(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Changes the address assigned to call `escapeHatch()`
     * @param _newEscapeHatchCaller The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`
     */
    changeHatchEscapeCaller(
      _newEscapeHatchCaller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened
     * @param _token to transfer, use 0x0 for ether
     */
    escapeHatch(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    escapeHatchCaller(overrides?: CallOverrides): Promise<string>;

    escapeHatchDestination(overrides?: CallOverrides): Promise<string>;

    featured(overrides?: CallOverrides): Promise<string>;

    /**
     * Checks to see if `_token` is in the blacklist of tokens
     * @param _token the token address being queried
     * @returns False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`
     */
    isTokenEscapable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newOwnerCandidate(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Add a new DAppNode package
     * @param name the ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     * @returns the idPackage of the new package
     */
    addPackage(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Update a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param name the new ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     */
    updatePackage(
      idPackage: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newStatus the new status of the package
     */
    changeStatus(
      idPackage: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newPosition position to order the packages in the UI
     */
    changePosition(
      idPackage: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Switch the positio of two DAppNode packages
     * @param idPackage1 the id of the package to be switched
     * @param idPackage2 the id of the package to be switched
     */
    switchPosition(
      idPackage1: PromiseOrValue<BigNumberish>,
      idPackage2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Change the list of featured packages
     * @param _featured List of the ids of the featured packages if needed ids [5,43]: _featured = 0x052b0000000000000...
     */
    changeFeatured(
      _featured: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the information of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @returns name the new name of the packagestatus the status of the package
     */
    getPackage(
      idPackage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        name: string;
        status: BigNumber;
        position: BigNumber;
      }
    >;

    /**
     * its goal is to return the total number of DAppNode packages
     * @returns the total number of DAppNode packages
     */
    numberOfDAppNodePackages(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EscapeHatchBlackistedToken(address)"(
      token?: null
    ): EscapeHatchBlackistedTokenEventFilter;
    EscapeHatchBlackistedToken(
      token?: null
    ): EscapeHatchBlackistedTokenEventFilter;

    "EscapeHatchCalled(address,uint256)"(
      token?: null,
      amount?: null
    ): EscapeHatchCalledEventFilter;
    EscapeHatchCalled(
      token?: null,
      amount?: null
    ): EscapeHatchCalledEventFilter;

    "FeaturedChanged(bytes32)"(newFeatured?: null): FeaturedChangedEventFilter;
    FeaturedChanged(newFeatured?: null): FeaturedChangedEventFilter;

    "OwnershipRemoved()"(): OwnershipRemovedEventFilter;
    OwnershipRemoved(): OwnershipRemovedEventFilter;

    "OwnershipRequested(address,address)"(
      by?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipRequestedEventFilter;
    OwnershipRequested(
      by?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PackageAdded(uint256,string)"(
      idPackage?: PromiseOrValue<BigNumberish> | null,
      name?: null
    ): PackageAddedEventFilter;
    PackageAdded(
      idPackage?: PromiseOrValue<BigNumberish> | null,
      name?: null
    ): PackageAddedEventFilter;

    "PackageUpdated(uint256,string)"(
      idPackage?: PromiseOrValue<BigNumberish> | null,
      name?: null
    ): PackageUpdatedEventFilter;
    PackageUpdated(
      idPackage?: PromiseOrValue<BigNumberish> | null,
      name?: null
    ): PackageUpdatedEventFilter;

    "PositionChanged(uint256,uint128)"(
      idPackage?: null,
      newPosition?: null
    ): PositionChangedEventFilter;
    PositionChanged(
      idPackage?: null,
      newPosition?: null
    ): PositionChangedEventFilter;

    "StatusChanged(uint256,uint128)"(
      idPackage?: null,
      newStatus?: null
    ): StatusChangedEventFilter;
    StatusChanged(idPackage?: null, newStatus?: null): StatusChangedEventFilter;
  };

  estimateGas: {
    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Changes the address assigned to call `escapeHatch()`
     * @param _newEscapeHatchCaller The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`
     */
    changeHatchEscapeCaller(
      _newEscapeHatchCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened
     * @param _token to transfer, use 0x0 for ether
     */
    escapeHatch(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escapeHatchCaller(overrides?: CallOverrides): Promise<BigNumber>;

    escapeHatchDestination(overrides?: CallOverrides): Promise<BigNumber>;

    featured(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks to see if `_token` is in the blacklist of tokens
     * @param _token the token address being queried
     * @returns False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`
     */
    isTokenEscapable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwnerCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Add a new DAppNode package
     * @param name the ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     * @returns the idPackage of the new package
     */
    addPackage(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param name the new ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     */
    updatePackage(
      idPackage: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newStatus the new status of the package
     */
    changeStatus(
      idPackage: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newPosition position to order the packages in the UI
     */
    changePosition(
      idPackage: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Switch the positio of two DAppNode packages
     * @param idPackage1 the id of the package to be switched
     * @param idPackage2 the id of the package to be switched
     */
    switchPosition(
      idPackage1: PromiseOrValue<BigNumberish>,
      idPackage2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Change the list of featured packages
     * @param _featured List of the ids of the featured packages if needed ids [5,43]: _featured = 0x052b0000000000000...
     */
    changeFeatured(
      _featured: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the information of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @returns name the new name of the packagestatus the status of the package
     */
    getPackage(
      idPackage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * its goal is to return the total number of DAppNode packages
     * @returns the total number of DAppNode packages
     */
    numberOfDAppNodePackages(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Changes the address assigned to call `escapeHatch()`
     * @param _newEscapeHatchCaller The address of a trusted account or  contract to call `escapeHatch()` to send the value in this contract to  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`  cannot move funds out of `escapeHatchDestination`
     */
    changeHatchEscapeCaller(
      _newEscapeHatchCaller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The `escapeHatch()` should only be called as a last resort if a security issue is uncovered or something unexpected happened
     * @param _token to transfer, use 0x0 for ether
     */
    escapeHatch(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escapeHatchCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escapeHatchDestination(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    featured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks to see if `_token` is in the blacklist of tokens
     * @param _token the token address being queried
     * @returns False if `_token` is in the blacklist and can't be taken out of  the contract via the `escapeHatch()`
     */
    isTokenEscapable(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwnerCandidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Add a new DAppNode package
     * @param name the ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     * @returns the idPackage of the new package
     */
    addPackage(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param name the new ENS name of the package
     * @param position to order the packages in the UI
     * @param status status of the package
     */
    updatePackage(
      idPackage: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newStatus the new status of the package
     */
    changeStatus(
      idPackage: PromiseOrValue<BigNumberish>,
      newStatus: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Change the status of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @param newPosition position to order the packages in the UI
     */
    changePosition(
      idPackage: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Switch the positio of two DAppNode packages
     * @param idPackage1 the id of the package to be switched
     * @param idPackage2 the id of the package to be switched
     */
    switchPosition(
      idPackage1: PromiseOrValue<BigNumberish>,
      idPackage2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Change the list of featured packages
     * @param _featured List of the ids of the featured packages if needed ids [5,43]: _featured = 0x052b0000000000000...
     */
    changeFeatured(
      _featured: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the information of a DAppNode package
     * @param idPackage the id of the package to be changed
     * @returns name the new name of the packagestatus the status of the package
     */
    getPackage(
      idPackage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * its goal is to return the total number of DAppNode packages
     * @returns the total number of DAppNode packages
     */
    numberOfDAppNodePackages(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
