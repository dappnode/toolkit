/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface OwnedInterface extends utils.Interface {
  functions: {
    "newOwnerCandidate()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeOwnership(address)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "changeOwnership(address)": FunctionFragment;
    "removeOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "newOwnerCandidate"
      | "owner"
      | "proposeOwnership"
      | "acceptOwnership"
      | "changeOwnership"
      | "removeOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "newOwnerCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "newOwnerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipRemoved()": EventFragment;
    "OwnershipRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipRemovedEventObject {}
export type OwnershipRemovedEvent = TypedEvent<[], OwnershipRemovedEventObject>;

export type OwnershipRemovedEventFilter =
  TypedEventFilter<OwnershipRemovedEvent>;

export interface OwnershipRequestedEventObject {
  by: string;
  to: string;
}
export type OwnershipRequestedEvent = TypedEvent<
  [string, string],
  OwnershipRequestedEventObject
>;

export type OwnershipRequestedEventFilter =
  TypedEventFilter<OwnershipRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Owned extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OwnedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    newOwnerCandidate(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  newOwnerCandidate(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
   * `onlyOwner` Proposes to transfer control of the contract to a  new owner
   * @param _newOwnerCandidate The address being proposed as the new owner
   */
  proposeOwnership(
    _newOwnerCandidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
   */
  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
   * `owner` can step down and assign some other address to this role
   * @param _newOwner The address of the new owner
   */
  changeOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
   * Decentralizes the contract, this operation cannot be undone
   * @param _dac `0xdac` has to be entered for this function to work
   */
  removeOwnership(
    _dac: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    newOwnerCandidate(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipRemoved()"(): OwnershipRemovedEventFilter;
    OwnershipRemoved(): OwnershipRemovedEventFilter;

    "OwnershipRequested(address,address)"(
      by?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipRequestedEventFilter;
    OwnershipRequested(
      by?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    newOwnerCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    newOwnerCandidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * In this 1st option for ownership transfer `proposeOwnership()` must  be called first by the current `owner` then `acceptOwnership()` must be  called by the `newOwnerCandidate`
     * `onlyOwner` Proposes to transfer control of the contract to a  new owner
     * @param _newOwnerCandidate The address being proposed as the new owner
     */
    proposeOwnership(
      _newOwnerCandidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the `newOwnerCandidate`, accepts the  transfer of ownership
     */
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * In this 2nd option for ownership transfer `changeOwnership()` can  be called and it will immediately assign ownership to the `newOwner`
     * `owner` can step down and assign some other address to this role
     * @param _newOwner The address of the new owner
     */
    changeOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * In this 3rd option for ownership transfer `removeOwnership()` can  be called and it will immediately assign ownership to the 0x0 address;  it requires a 0xdece be input as a parameter to prevent accidental use
     * Decentralizes the contract, this operation cannot be undone
     * @param _dac `0xdac` has to be entered for this function to work
     */
    removeOwnership(
      _dac: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
