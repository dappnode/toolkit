/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RepoInterface extends utils.Interface {
  functions: {
    "EVMSCRIPT_REGISTRY_APP_ID()": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "EVMSCRIPT_REGISTRY_APP()": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "CREATE_VERSION_ROLE()": FunctionFragment;
    "kernel()": FunctionFragment;
    "getExecutor(bytes)": FunctionFragment;
    "newVersion(uint16[3],address,bytes)": FunctionFragment;
    "getLatest()": FunctionFragment;
    "getLatestForContractAddress(address)": FunctionFragment;
    "getBySemanticVersion(uint16[3])": FunctionFragment;
    "getByVersionId(uint256)": FunctionFragment;
    "getVersionsCount()": FunctionFragment;
    "isValidBump(uint16[3],uint16[3])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EVMSCRIPT_REGISTRY_APP_ID"
      | "appId"
      | "getInitializationBlock"
      | "EVMSCRIPT_REGISTRY_APP"
      | "canPerform"
      | "CREATE_VERSION_ROLE"
      | "kernel"
      | "getExecutor"
      | "newVersion"
      | "getLatest"
      | "getLatestForContractAddress"
      | "getBySemanticVersion"
      | "getByVersionId"
      | "getVersionsCount"
      | "isValidBump"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_VERSION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExecutor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "newVersion",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getLatest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLatestForContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBySemanticVersion",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getByVersionId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidBump",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_VERSION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLatest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestForContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBySemanticVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getByVersionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidBump",
    data: BytesLike
  ): Result;

  events: {
    "NewVersion(uint256,uint16[3])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewVersion"): EventFragment;
}

export interface NewVersionEventObject {
  versionId: BigNumber;
  semanticVersion: [number, number, number];
}
export type NewVersionEvent = TypedEvent<
  [BigNumber, [number, number, number]],
  NewVersionEventObject
>;

export type NewVersionEventFilter = TypedEventFilter<NewVersionEvent>;

export interface Repo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RepoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<[string]>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Create new version for repo
     * @param _contentURI External URI for fetching new version's content
     * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)
     * @param _newSemanticVersion Semantic version for new repo version
     */
    newVersion(
      _newSemanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contractAddress: PromiseOrValue<string>,
      _contentURI: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLatest(
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getLatestForContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getBySemanticVersion(
      _semanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getByVersionId(
      _versionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getVersionsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    isValidBump(
      _oldVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _newVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<string>;

  appId(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns Block number in which the contract was initialized
   */
  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<string>;

  canPerform(
    _sender: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    params: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  getExecutor(
    _script: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Create new version for repo
   * @param _contentURI External URI for fetching new version's content
   * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)
   * @param _newSemanticVersion Semantic version for new repo version
   */
  newVersion(
    _newSemanticVersion: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _contractAddress: PromiseOrValue<string>,
    _contentURI: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLatest(
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  getLatestForContractAddress(
    _contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  getBySemanticVersion(
    _semanticVersion: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  getByVersionId(
    _versionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  getVersionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  isValidBump(
    _oldVersion: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _newVersion: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<string>;

    appId(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<string>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Create new version for repo
     * @param _contentURI External URI for fetching new version's content
     * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)
     * @param _newSemanticVersion Semantic version for new repo version
     */
    newVersion(
      _newSemanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contractAddress: PromiseOrValue<string>,
      _contentURI: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLatest(
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getLatestForContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getBySemanticVersion(
      _semanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getByVersionId(
      _versionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getVersionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    isValidBump(
      _oldVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _newVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewVersion(uint256,uint16[3])"(
      versionId?: null,
      semanticVersion?: null
    ): NewVersionEventFilter;
    NewVersion(versionId?: null, semanticVersion?: null): NewVersionEventFilter;
  };

  estimateGas: {
    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<BigNumber>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Create new version for repo
     * @param _contentURI External URI for fetching new version's content
     * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)
     * @param _newSemanticVersion Semantic version for new repo version
     */
    newVersion(
      _newSemanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contractAddress: PromiseOrValue<string>,
      _contentURI: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLatest(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestForContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBySemanticVersion(
      _semanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getByVersionId(
      _versionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    isValidBump(
      _oldVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _newVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EVMSCRIPT_REGISTRY_APP_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVMSCRIPT_REGISTRY_APP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_VERSION_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Create new version for repo
     * @param _contentURI External URI for fetching new version's content
     * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)
     * @param _newSemanticVersion Semantic version for new repo version
     */
    newVersion(
      _newSemanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contractAddress: PromiseOrValue<string>,
      _contentURI: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLatest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestForContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBySemanticVersion(
      _semanticVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getByVersionId(
      _versionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidBump(
      _oldVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _newVersion: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
