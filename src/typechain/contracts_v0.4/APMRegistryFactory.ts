/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface APMRegistryFactoryInterface extends utils.Interface {
  functions: {
    "REPO_APP_NAME()": FunctionFragment;
    "APM_APP_NAME()": FunctionFragment;
    "ENS_SUB_APP_NAME()": FunctionFragment;
    "registryBase()": FunctionFragment;
    "ensSubdomainRegistrarBase()": FunctionFragment;
    "ens()": FunctionFragment;
    "daoFactory()": FunctionFragment;
    "repoBase()": FunctionFragment;
    "newAPM(bytes32,bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REPO_APP_NAME"
      | "APM_APP_NAME"
      | "ENS_SUB_APP_NAME"
      | "registryBase"
      | "ensSubdomainRegistrarBase"
      | "ens"
      | "daoFactory"
      | "repoBase"
      | "newAPM"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REPO_APP_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APM_APP_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENS_SUB_APP_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registryBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ensSubdomainRegistrarBase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repoBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newAPM",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "REPO_APP_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APM_APP_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENS_SUB_APP_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registryBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensSubdomainRegistrarBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repoBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAPM", data: BytesLike): Result;

  events: {
    "DeployAPM(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployAPM"): EventFragment;
}

export interface DeployAPMEventObject {
  node: string;
  apm: string;
}
export type DeployAPMEvent = TypedEvent<[string, string], DeployAPMEventObject>;

export type DeployAPMEventFilter = TypedEventFilter<DeployAPMEvent>;

export interface APMRegistryFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: APMRegistryFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REPO_APP_NAME(overrides?: CallOverrides): Promise<[string]>;

    APM_APP_NAME(overrides?: CallOverrides): Promise<[string]>;

    ENS_SUB_APP_NAME(overrides?: CallOverrides): Promise<[string]>;

    registryBase(overrides?: CallOverrides): Promise<[string]>;

    ensSubdomainRegistrarBase(overrides?: CallOverrides): Promise<[string]>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    daoFactory(overrides?: CallOverrides): Promise<[string]>;

    repoBase(overrides?: CallOverrides): Promise<[string]>;

    newAPM(
      _tld: PromiseOrValue<BytesLike>,
      _label: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  REPO_APP_NAME(overrides?: CallOverrides): Promise<string>;

  APM_APP_NAME(overrides?: CallOverrides): Promise<string>;

  ENS_SUB_APP_NAME(overrides?: CallOverrides): Promise<string>;

  registryBase(overrides?: CallOverrides): Promise<string>;

  ensSubdomainRegistrarBase(overrides?: CallOverrides): Promise<string>;

  ens(overrides?: CallOverrides): Promise<string>;

  daoFactory(overrides?: CallOverrides): Promise<string>;

  repoBase(overrides?: CallOverrides): Promise<string>;

  newAPM(
    _tld: PromiseOrValue<BytesLike>,
    _label: PromiseOrValue<BytesLike>,
    _root: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REPO_APP_NAME(overrides?: CallOverrides): Promise<string>;

    APM_APP_NAME(overrides?: CallOverrides): Promise<string>;

    ENS_SUB_APP_NAME(overrides?: CallOverrides): Promise<string>;

    registryBase(overrides?: CallOverrides): Promise<string>;

    ensSubdomainRegistrarBase(overrides?: CallOverrides): Promise<string>;

    ens(overrides?: CallOverrides): Promise<string>;

    daoFactory(overrides?: CallOverrides): Promise<string>;

    repoBase(overrides?: CallOverrides): Promise<string>;

    newAPM(
      _tld: PromiseOrValue<BytesLike>,
      _label: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DeployAPM(bytes32,address)"(
      node?: PromiseOrValue<BytesLike> | null,
      apm?: null
    ): DeployAPMEventFilter;
    DeployAPM(
      node?: PromiseOrValue<BytesLike> | null,
      apm?: null
    ): DeployAPMEventFilter;
  };

  estimateGas: {
    REPO_APP_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    APM_APP_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    ENS_SUB_APP_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    registryBase(overrides?: CallOverrides): Promise<BigNumber>;

    ensSubdomainRegistrarBase(overrides?: CallOverrides): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    daoFactory(overrides?: CallOverrides): Promise<BigNumber>;

    repoBase(overrides?: CallOverrides): Promise<BigNumber>;

    newAPM(
      _tld: PromiseOrValue<BytesLike>,
      _label: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REPO_APP_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    APM_APP_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ENS_SUB_APP_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registryBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ensSubdomainRegistrarBase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repoBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAPM(
      _tld: PromiseOrValue<BytesLike>,
      _label: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
