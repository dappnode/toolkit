/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface KernelInterface extends utils.Interface {
  functions: {
    "KERNEL_APP_ID()": FunctionFragment;
    "APP_ADDR_NAMESPACE()": FunctionFragment;
    "KERNEL_APP()": FunctionFragment;
    "apps(bytes32)": FunctionFragment;
    "CORE_NAMESPACE()": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "APP_MANAGER_ROLE()": FunctionFragment;
    "ACL_APP()": FunctionFragment;
    "ACL_APP_ID()": FunctionFragment;
    "newAppProxyPinned(address,bytes32,bytes)": FunctionFragment;
    "newAppProxyPinned(address,bytes32)": FunctionFragment;
    "kernel()": FunctionFragment;
    "APP_BASES_NAMESPACE()": FunctionFragment;
    "newAppProxy(address,bytes32)": FunctionFragment;
    "newAppProxy(address,bytes32,bytes)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "newAppInstance(bytes32,address)": FunctionFragment;
    "newPinnedAppInstance(bytes32,address)": FunctionFragment;
    "setApp(bytes32,bytes32,address)": FunctionFragment;
    "getApp(bytes32)": FunctionFragment;
    "acl()": FunctionFragment;
    "hasPermission(address,address,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "KERNEL_APP_ID"
      | "APP_ADDR_NAMESPACE"
      | "KERNEL_APP"
      | "apps"
      | "CORE_NAMESPACE"
      | "appId"
      | "getInitializationBlock"
      | "APP_MANAGER_ROLE"
      | "ACL_APP"
      | "ACL_APP_ID"
      | "newAppProxyPinned(address,bytes32,bytes)"
      | "newAppProxyPinned(address,bytes32)"
      | "kernel"
      | "APP_BASES_NAMESPACE"
      | "newAppProxy(address,bytes32)"
      | "newAppProxy(address,bytes32,bytes)"
      | "initialize"
      | "newAppInstance"
      | "newPinnedAppInstance"
      | "setApp"
      | "getApp"
      | "acl"
      | "hasPermission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "KERNEL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APP_ADDR_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KERNEL_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "apps",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "CORE_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APP_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ACL_APP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ACL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxyPinned(address,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxyPinned(address,bytes32)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "APP_BASES_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxy(address,bytes32)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxy(address,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppInstance",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newPinnedAppInstance",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApp",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "KERNEL_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_ADDR_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "KERNEL_APP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CORE_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ACL_APP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ACL_APP_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxyPinned(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxyPinned(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "APP_BASES_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxy(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxy(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newAppInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newPinnedAppInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;

  events: {
    "NewAppProxy(address)": EventFragment;
    "SetApp(bytes32,bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAppProxy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApp"): EventFragment;
}

export interface NewAppProxyEventObject {
  proxy: string;
}
export type NewAppProxyEvent = TypedEvent<[string], NewAppProxyEventObject>;

export type NewAppProxyEventFilter = TypedEventFilter<NewAppProxyEvent>;

export interface SetAppEventObject {
  namespace: string;
  name: string;
  id: string;
  app: string;
}
export type SetAppEvent = TypedEvent<
  [string, string, string, string],
  SetAppEventObject
>;

export type SetAppEventFilter = TypedEventFilter<SetAppEvent>;

export interface Kernel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KernelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    KERNEL_APP(overrides?: CallOverrides): Promise<[string]>;

    apps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ACL_APP(overrides?: CallOverrides): Promise<[string]>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    "newAppProxy(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _baseAcl Address of base ACL app
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _baseAcl: PromiseOrValue<string>,
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newPinnedAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the resolving address of an app instance or base implementation
     * @param _app Address of the app
     * @param _name Name of the app
     * @param _namespace App namespace to use
     * @returns ID of app
     */
    setApp(
      _namespace: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<BytesLike>,
      _app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the address of an app instance or base implementation
     * @param _id App identifier
     * @returns Address of the app
     */
    getApp(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Get the installed ACL app
     * @returns ACL app
     */
    acl(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Function called by apps to check ACL on kernel or to check permission status
     * @param _how Extra data for ACL auth
     * @param _what Identifier for a group of actions in app
     * @param _where Address of the app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    hasPermission(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  KERNEL_APP_ID(overrides?: CallOverrides): Promise<string>;

  APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  KERNEL_APP(overrides?: CallOverrides): Promise<string>;

  apps(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  CORE_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  appId(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns Block number in which the contract was initialized
   */
  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  ACL_APP(overrides?: CallOverrides): Promise<string>;

  ACL_APP_ID(overrides?: CallOverrides): Promise<string>;

  "newAppProxyPinned(address,bytes32,bytes)"(
    _kernel: PromiseOrValue<string>,
    _appId: PromiseOrValue<BytesLike>,
    _initializePayload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newAppProxyPinned(address,bytes32)"(
    _kernel: PromiseOrValue<string>,
    _appId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kernel(overrides?: CallOverrides): Promise<string>;

  APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  "newAppProxy(address,bytes32)"(
    _kernel: PromiseOrValue<string>,
    _appId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newAppProxy(address,bytes32,bytes)"(
    _kernel: PromiseOrValue<string>,
    _appId: PromiseOrValue<BytesLike>,
    _initializePayload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initialize can only be called once. It saves the block number in which it was initialized.
   * Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions
   * @param _baseAcl Address of base ACL app
   * @param _permissionsCreator Entity that will be given permission over createPermission
   */
  initialize(
    _baseAcl: PromiseOrValue<string>,
    _permissionsCreator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set
   * @param _appBase Address of the app's base implementation
   * @param _name Name of the app
   * @returns AppProxy instance
   */
  newAppInstance(
    _name: PromiseOrValue<BytesLike>,
    _appBase: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set
   * @param _appBase Address of the app's base implementation
   * @param _name Name of the app
   * @returns AppProxy instance
   */
  newPinnedAppInstance(
    _name: PromiseOrValue<BytesLike>,
    _appBase: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the resolving address of an app instance or base implementation
   * @param _app Address of the app
   * @param _name Name of the app
   * @param _namespace App namespace to use
   * @returns ID of app
   */
  setApp(
    _namespace: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<BytesLike>,
    _app: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the address of an app instance or base implementation
   * @param _id App identifier
   * @returns Address of the app
   */
  getApp(
    _id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Get the installed ACL app
   * @returns ACL app
   */
  acl(overrides?: CallOverrides): Promise<string>;

  /**
   * Function called by apps to check ACL on kernel or to check permission status
   * @param _how Extra data for ACL auth
   * @param _what Identifier for a group of actions in app
   * @param _where Address of the app
   * @param _who Sender of the original call
   * @returns boolean indicating whether the ACL allows the role or not
   */
  hasPermission(
    _who: PromiseOrValue<string>,
    _where: PromiseOrValue<string>,
    _what: PromiseOrValue<BytesLike>,
    _how: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<string>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    KERNEL_APP(overrides?: CallOverrides): Promise<string>;

    apps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    appId(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    ACL_APP(overrides?: CallOverrides): Promise<string>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<string>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    "newAppProxy(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _baseAcl Address of base ACL app
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _baseAcl: PromiseOrValue<string>,
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newPinnedAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Set the resolving address of an app instance or base implementation
     * @param _app Address of the app
     * @param _name Name of the app
     * @param _namespace App namespace to use
     * @returns ID of app
     */
    setApp(
      _namespace: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<BytesLike>,
      _app: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get the address of an app instance or base implementation
     * @param _id App identifier
     * @returns Address of the app
     */
    getApp(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Get the installed ACL app
     * @returns ACL app
     */
    acl(overrides?: CallOverrides): Promise<string>;

    /**
     * Function called by apps to check ACL on kernel or to check permission status
     * @param _how Extra data for ACL auth
     * @param _what Identifier for a group of actions in app
     * @param _where Address of the app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    hasPermission(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewAppProxy(address)"(proxy?: null): NewAppProxyEventFilter;
    NewAppProxy(proxy?: null): NewAppProxyEventFilter;

    "SetApp(bytes32,bytes32,bytes32,address)"(
      namespace?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<BytesLike> | null,
      id?: PromiseOrValue<BytesLike> | null,
      app?: null
    ): SetAppEventFilter;
    SetApp(
      namespace?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<BytesLike> | null,
      id?: PromiseOrValue<BytesLike> | null,
      app?: null
    ): SetAppEventFilter;
  };

  estimateGas: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    KERNEL_APP(overrides?: CallOverrides): Promise<BigNumber>;

    apps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ACL_APP(overrides?: CallOverrides): Promise<BigNumber>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    "newAppProxy(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _baseAcl Address of base ACL app
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _baseAcl: PromiseOrValue<string>,
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newPinnedAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Set the resolving address of an app instance or base implementation
     * @param _app Address of the app
     * @param _name Name of the app
     * @param _namespace App namespace to use
     * @returns ID of app
     */
    setApp(
      _namespace: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<BytesLike>,
      _app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the address of an app instance or base implementation
     * @param _id App identifier
     * @returns Address of the app
     */
    getApp(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get the installed ACL app
     * @returns ACL app
     */
    acl(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Function called by apps to check ACL on kernel or to check permission status
     * @param _how Extra data for ACL auth
     * @param _what Identifier for a group of actions in app
     * @param _where Address of the app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    hasPermission(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    APP_ADDR_NAMESPACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KERNEL_APP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apps(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACL_APP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    APP_BASES_NAMESPACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "newAppProxy(address,bytes32)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: PromiseOrValue<string>,
      _appId: PromiseOrValue<BytesLike>,
      _initializePayload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _baseAcl Address of base ACL app
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _baseAcl: PromiseOrValue<string>,
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set
     * @param _appBase Address of the app's base implementation
     * @param _name Name of the app
     * @returns AppProxy instance
     */
    newPinnedAppInstance(
      _name: PromiseOrValue<BytesLike>,
      _appBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the resolving address of an app instance or base implementation
     * @param _app Address of the app
     * @param _name Name of the app
     * @param _namespace App namespace to use
     * @returns ID of app
     */
    setApp(
      _namespace: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<BytesLike>,
      _app: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the address of an app instance or base implementation
     * @param _id App identifier
     * @returns Address of the app
     */
    getApp(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get the installed ACL app
     * @returns ACL app
     */
    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Function called by apps to check ACL on kernel or to check permission status
     * @param _how Extra data for ACL auth
     * @param _what Identifier for a group of actions in app
     * @param _where Address of the app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    hasPermission(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
