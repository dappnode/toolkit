/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ENSSubdomainRegistrarInterface extends utils.Interface {
  functions: {
    "POINT_ROOTNODE_ROLE()": FunctionFragment;
    "ens()": FunctionFragment;
    "PUBLIC_RESOLVER_NODE()": FunctionFragment;
    "EVMSCRIPT_REGISTRY_APP_ID()": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "ETH_TLD_LABEL()": FunctionFragment;
    "EVMSCRIPT_REGISTRY_APP()": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "ENS_ROOT()": FunctionFragment;
    "DELETE_NAME_ROLE()": FunctionFragment;
    "PUBLIC_RESOLVER_LABEL()": FunctionFragment;
    "kernel()": FunctionFragment;
    "getExecutor(bytes)": FunctionFragment;
    "rootNode()": FunctionFragment;
    "ETH_TLD_NODE()": FunctionFragment;
    "CREATE_NAME_ROLE()": FunctionFragment;
    "initialize(address,bytes32)": FunctionFragment;
    "createName(bytes32,address)": FunctionFragment;
    "createNameAndPoint(bytes32,address)": FunctionFragment;
    "deleteName(bytes32)": FunctionFragment;
    "pointRootNode(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "POINT_ROOTNODE_ROLE"
      | "ens"
      | "PUBLIC_RESOLVER_NODE"
      | "EVMSCRIPT_REGISTRY_APP_ID"
      | "appId"
      | "getInitializationBlock"
      | "ETH_TLD_LABEL"
      | "EVMSCRIPT_REGISTRY_APP"
      | "canPerform"
      | "ENS_ROOT"
      | "DELETE_NAME_ROLE"
      | "PUBLIC_RESOLVER_LABEL"
      | "kernel"
      | "getExecutor"
      | "rootNode"
      | "ETH_TLD_NODE"
      | "CREATE_NAME_ROLE"
      | "initialize"
      | "createName"
      | "createNameAndPoint"
      | "deleteName"
      | "pointRootNode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "POINT_ROOTNODE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_RESOLVER_NODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_TLD_LABEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "ENS_ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DELETE_NAME_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_RESOLVER_LABEL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExecutor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "rootNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ETH_TLD_NODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_NAME_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createName",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNameAndPoint",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteName",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pointRootNode",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "POINT_ROOTNODE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_RESOLVER_NODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_TLD_LABEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ENS_ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DELETE_NAME_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_RESOLVER_LABEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ETH_TLD_NODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_NAME_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNameAndPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointRootNode",
    data: BytesLike
  ): Result;

  events: {
    "NewName(bytes32,bytes32)": EventFragment;
    "DeleteName(bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteName"): EventFragment;
}

export interface NewNameEventObject {
  node: string;
  label: string;
}
export type NewNameEvent = TypedEvent<[string, string], NewNameEventObject>;

export type NewNameEventFilter = TypedEventFilter<NewNameEvent>;

export interface DeleteNameEventObject {
  node: string;
  label: string;
}
export type DeleteNameEvent = TypedEvent<
  [string, string],
  DeleteNameEventObject
>;

export type DeleteNameEventFilter = TypedEventFilter<DeleteNameEvent>;

export interface ENSSubdomainRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ENSSubdomainRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POINT_ROOTNODE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    PUBLIC_RESOLVER_NODE(overrides?: CallOverrides): Promise<[string]>;

    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETH_TLD_LABEL(overrides?: CallOverrides): Promise<[string]>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<[string]>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ENS_ROOT(overrides?: CallOverrides): Promise<[string]>;

    DELETE_NAME_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PUBLIC_RESOLVER_LABEL(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rootNode(overrides?: CallOverrides): Promise<[string]>;

    ETH_TLD_NODE(overrides?: CallOverrides): Promise<[string]>;

    CREATE_NAME_ROLE(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _ens: PromiseOrValue<string>,
      _rootNode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createName(
      _label: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNameAndPoint(
      _label: PromiseOrValue<BytesLike>,
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteName(
      _label: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pointRootNode(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  POINT_ROOTNODE_ROLE(overrides?: CallOverrides): Promise<string>;

  ens(overrides?: CallOverrides): Promise<string>;

  PUBLIC_RESOLVER_NODE(overrides?: CallOverrides): Promise<string>;

  EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<string>;

  appId(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns Block number in which the contract was initialized
   */
  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  ETH_TLD_LABEL(overrides?: CallOverrides): Promise<string>;

  EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<string>;

  canPerform(
    _sender: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    params: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  ENS_ROOT(overrides?: CallOverrides): Promise<string>;

  DELETE_NAME_ROLE(overrides?: CallOverrides): Promise<string>;

  PUBLIC_RESOLVER_LABEL(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  getExecutor(
    _script: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  rootNode(overrides?: CallOverrides): Promise<string>;

  ETH_TLD_NODE(overrides?: CallOverrides): Promise<string>;

  CREATE_NAME_ROLE(overrides?: CallOverrides): Promise<string>;

  initialize(
    _ens: PromiseOrValue<string>,
    _rootNode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createName(
    _label: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNameAndPoint(
    _label: PromiseOrValue<BytesLike>,
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteName(
    _label: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pointRootNode(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    POINT_ROOTNODE_ROLE(overrides?: CallOverrides): Promise<string>;

    ens(overrides?: CallOverrides): Promise<string>;

    PUBLIC_RESOLVER_NODE(overrides?: CallOverrides): Promise<string>;

    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<string>;

    appId(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_TLD_LABEL(overrides?: CallOverrides): Promise<string>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<string>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    ENS_ROOT(overrides?: CallOverrides): Promise<string>;

    DELETE_NAME_ROLE(overrides?: CallOverrides): Promise<string>;

    PUBLIC_RESOLVER_LABEL(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    rootNode(overrides?: CallOverrides): Promise<string>;

    ETH_TLD_NODE(overrides?: CallOverrides): Promise<string>;

    CREATE_NAME_ROLE(overrides?: CallOverrides): Promise<string>;

    initialize(
      _ens: PromiseOrValue<string>,
      _rootNode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createName(
      _label: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createNameAndPoint(
      _label: PromiseOrValue<BytesLike>,
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deleteName(
      _label: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pointRootNode(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewName(bytes32,bytes32)"(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null
    ): NewNameEventFilter;
    NewName(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null
    ): NewNameEventFilter;

    "DeleteName(bytes32,bytes32)"(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null
    ): DeleteNameEventFilter;
    DeleteName(
      node?: PromiseOrValue<BytesLike> | null,
      label?: PromiseOrValue<BytesLike> | null
    ): DeleteNameEventFilter;
  };

  estimateGas: {
    POINT_ROOTNODE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLIC_RESOLVER_NODE(overrides?: CallOverrides): Promise<BigNumber>;

    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_TLD_LABEL(overrides?: CallOverrides): Promise<BigNumber>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<BigNumber>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ENS_ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    DELETE_NAME_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLIC_RESOLVER_LABEL(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootNode(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_TLD_NODE(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_NAME_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ens: PromiseOrValue<string>,
      _rootNode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createName(
      _label: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNameAndPoint(
      _label: PromiseOrValue<BytesLike>,
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteName(
      _label: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pointRootNode(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POINT_ROOTNODE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUBLIC_RESOLVER_NODE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVMSCRIPT_REGISTRY_APP_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETH_TLD_LABEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EVMSCRIPT_REGISTRY_APP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ENS_ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELETE_NAME_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PUBLIC_RESOLVER_LABEL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETH_TLD_NODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATE_NAME_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ens: PromiseOrValue<string>,
      _rootNode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createName(
      _label: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNameAndPoint(
      _label: PromiseOrValue<BytesLike>,
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteName(
      _label: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pointRootNode(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
