/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AppProxyUpgradeableInterface extends utils.Interface {
  functions: {
    "KERNEL_APP_ID()": FunctionFragment;
    "APP_ADDR_NAMESPACE()": FunctionFragment;
    "KERNEL_APP()": FunctionFragment;
    "pinnedCode()": FunctionFragment;
    "CORE_NAMESPACE()": FunctionFragment;
    "appId()": FunctionFragment;
    "ACL_APP()": FunctionFragment;
    "ACL_APP_ID()": FunctionFragment;
    "kernel()": FunctionFragment;
    "APP_BASES_NAMESPACE()": FunctionFragment;
    "getCode()": FunctionFragment;
    "isUpgradeable()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "KERNEL_APP_ID"
      | "APP_ADDR_NAMESPACE"
      | "KERNEL_APP"
      | "pinnedCode"
      | "CORE_NAMESPACE"
      | "appId"
      | "ACL_APP"
      | "ACL_APP_ID"
      | "kernel"
      | "APP_BASES_NAMESPACE"
      | "getCode"
      | "isUpgradeable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "KERNEL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APP_ADDR_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KERNEL_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pinnedCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CORE_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(functionFragment: "ACL_APP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ACL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "APP_BASES_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isUpgradeable",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "KERNEL_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_ADDR_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "KERNEL_APP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pinnedCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CORE_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ACL_APP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ACL_APP_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "APP_BASES_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUpgradeable",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AppProxyUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AppProxyUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    KERNEL_APP(overrides?: CallOverrides): Promise<[string]>;

    pinnedCode(overrides?: CallOverrides): Promise<[string]>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    ACL_APP(overrides?: CallOverrides): Promise<[string]>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    getCode(overrides?: CallOverrides): Promise<[string]>;

    isUpgradeable(overrides?: CallOverrides): Promise<[boolean]>;
  };

  KERNEL_APP_ID(overrides?: CallOverrides): Promise<string>;

  APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  KERNEL_APP(overrides?: CallOverrides): Promise<string>;

  pinnedCode(overrides?: CallOverrides): Promise<string>;

  CORE_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  appId(overrides?: CallOverrides): Promise<string>;

  ACL_APP(overrides?: CallOverrides): Promise<string>;

  ACL_APP_ID(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  getCode(overrides?: CallOverrides): Promise<string>;

  isUpgradeable(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<string>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    KERNEL_APP(overrides?: CallOverrides): Promise<string>;

    pinnedCode(overrides?: CallOverrides): Promise<string>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    appId(overrides?: CallOverrides): Promise<string>;

    ACL_APP(overrides?: CallOverrides): Promise<string>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    getCode(overrides?: CallOverrides): Promise<string>;

    isUpgradeable(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    KERNEL_APP(overrides?: CallOverrides): Promise<BigNumber>;

    pinnedCode(overrides?: CallOverrides): Promise<BigNumber>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    ACL_APP(overrides?: CallOverrides): Promise<BigNumber>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    getCode(overrides?: CallOverrides): Promise<BigNumber>;

    isUpgradeable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    KERNEL_APP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    APP_ADDR_NAMESPACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KERNEL_APP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pinnedCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACL_APP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACL_APP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    APP_BASES_NAMESPACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpgradeable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
