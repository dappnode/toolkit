/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ACLInterface extends utils.Interface {
  functions: {
    "CREATE_PERMISSIONS_ROLE()": FunctionFragment;
    "EVMSCRIPT_REGISTRY_APP_ID()": FunctionFragment;
    "permissionParams(bytes32,uint256)": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "EVMSCRIPT_REGISTRY_APP()": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "EMPTY_PARAM_HASH()": FunctionFragment;
    "kernel()": FunctionFragment;
    "getExecutor(bytes)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "createPermission(address,address,bytes32,address)": FunctionFragment;
    "grantPermission(address,address,bytes32)": FunctionFragment;
    "grantPermissionP(address,address,bytes32,uint256[])": FunctionFragment;
    "revokePermission(address,address,bytes32)": FunctionFragment;
    "setPermissionManager(address,address,bytes32)": FunctionFragment;
    "getPermissionManager(address,bytes32)": FunctionFragment;
    "hasPermission(address,address,bytes32)": FunctionFragment;
    "hasPermission(address,address,bytes32,uint256[])": FunctionFragment;
    "hasPermission(address,address,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CREATE_PERMISSIONS_ROLE"
      | "EVMSCRIPT_REGISTRY_APP_ID"
      | "permissionParams"
      | "appId"
      | "getInitializationBlock"
      | "EVMSCRIPT_REGISTRY_APP"
      | "canPerform"
      | "EMPTY_PARAM_HASH"
      | "kernel"
      | "getExecutor"
      | "initialize"
      | "createPermission"
      | "grantPermission"
      | "grantPermissionP"
      | "revokePermission"
      | "setPermissionManager"
      | "getPermissionManager"
      | "hasPermission(address,address,bytes32)"
      | "hasPermission(address,address,bytes32,uint256[])"
      | "hasPermission(address,address,bytes32,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CREATE_PERMISSIONS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionParams",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "EMPTY_PARAM_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExecutor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermissionP",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionManager",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionManager",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission(address,address,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission(address,address,bytes32,uint256[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission(address,address,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CREATE_PERMISSIONS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVMSCRIPT_REGISTRY_APP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EMPTY_PARAM_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermissionP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission(address,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission(address,address,bytes32,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission(address,address,bytes32,bytes)",
    data: BytesLike
  ): Result;

  events: {
    "SetPermission(address,address,bytes32,bool)": EventFragment;
    "ChangePermissionManager(address,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetPermission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePermissionManager"): EventFragment;
}

export interface SetPermissionEventObject {
  entity: string;
  app: string;
  role: string;
  allowed: boolean;
}
export type SetPermissionEvent = TypedEvent<
  [string, string, string, boolean],
  SetPermissionEventObject
>;

export type SetPermissionEventFilter = TypedEventFilter<SetPermissionEvent>;

export interface ChangePermissionManagerEventObject {
  app: string;
  role: string;
  manager: string;
}
export type ChangePermissionManagerEvent = TypedEvent<
  [string, string, string],
  ChangePermissionManagerEventObject
>;

export type ChangePermissionManagerEventFilter =
  TypedEventFilter<ChangePermissionManagerEvent>;

export interface ACL extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ACLInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    permissionParams(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber] & { id: number; op: number; value: BigNumber }
    >;

    appId(overrides?: CallOverrides): Promise<[string]>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<[string]>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes an ACL instance and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Creates a permission that wasn't previously set. Access is limited by the ACL.     If a created permission is removed it is possible to reset it with createPermission.
     * Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_app` (setting `_manager` as the permission manager)
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _manager Address of the entity that will be able to grant and revoke the permission further.
     * @param _role Identifier for the group of actions in app given access to perform
     */
    createPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Grants permission if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _params Permission parameters
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermissionP(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes permission if allowed. This requires `msg.sender` to be the the permission manager
     * Revokes `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be revoked
     * @param _entity Address of the whitelisted entity to revoke access from
     * @param _role Identifier for the group of actions in app being revoked
     */
    revokePermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets `_newManager` as the manager of the permission `_role` in `_app`
     * @param _app Address of the app in which the permission management is being transferred
     * @param _newManager Address for the new manager
     * @param _role Identifier for the group of actions being transferred
     */
    setPermissionManager(
      _newManager: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get manager for permission
     * @param _app Address of the app
     * @param _role Identifier for a group of actions in app
     * @returns address of the manager for the permission
     */
    getPermissionManager(
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "hasPermission(address,address,bytes32)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Function called by apps to check ACL on kernel or to check permission statu
     * @param _how Permission parameters
     * @param _where Identifier for a group of actions in app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    "hasPermission(address,address,bytes32,bytes)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<string>;

  EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<string>;

  permissionParams(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber] & { id: number; op: number; value: BigNumber }
  >;

  appId(overrides?: CallOverrides): Promise<string>;

  /**
   * @returns Block number in which the contract was initialized
   */
  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<string>;

  canPerform(
    _sender: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    params: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  getExecutor(
    _script: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Initialize can only be called once. It saves the block number in which it was initialized.
   * Initializes an ACL instance and sets `_permissionsCreator` as the entity that can create other permissions
   * @param _permissionsCreator Entity that will be given permission over createPermission
   */
  initialize(
    _permissionsCreator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Creates a permission that wasn't previously set. Access is limited by the ACL.     If a created permission is removed it is possible to reset it with createPermission.
   * Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_app` (setting `_manager` as the permission manager)
   * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
   * @param _entity Address of the whitelisted entity that will be able to perform the role
   * @param _manager Address of the entity that will be able to grant and revoke the permission further.
   * @param _role Identifier for the group of actions in app given access to perform
   */
  createPermission(
    _entity: PromiseOrValue<string>,
    _app: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Grants permission if allowed. This requires `msg.sender` to be the permission manager
   * Grants `_entity` the ability to perform actions of role `_role` on `_app`
   * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
   * @param _entity Address of the whitelisted entity that will be able to perform the role
   * @param _role Identifier for the group of actions in app given access to perform
   */
  grantPermission(
    _entity: PromiseOrValue<string>,
    _app: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager
   * Grants `_entity` the ability to perform actions of role `_role` on `_app`
   * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
   * @param _entity Address of the whitelisted entity that will be able to perform the role
   * @param _params Permission parameters
   * @param _role Identifier for the group of actions in app given access to perform
   */
  grantPermissionP(
    _entity: PromiseOrValue<string>,
    _app: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    _params: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes permission if allowed. This requires `msg.sender` to be the the permission manager
   * Revokes `_entity` the ability to perform actions of role `_role` on `_app`
   * @param _app Address of the app in which the role will be revoked
   * @param _entity Address of the whitelisted entity to revoke access from
   * @param _role Identifier for the group of actions in app being revoked
   */
  revokePermission(
    _entity: PromiseOrValue<string>,
    _app: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets `_newManager` as the manager of the permission `_role` in `_app`
   * @param _app Address of the app in which the permission management is being transferred
   * @param _newManager Address for the new manager
   * @param _role Identifier for the group of actions being transferred
   */
  setPermissionManager(
    _newManager: PromiseOrValue<string>,
    _app: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get manager for permission
   * @param _app Address of the app
   * @param _role Identifier for a group of actions in app
   * @returns address of the manager for the permission
   */
  getPermissionManager(
    _app: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "hasPermission(address,address,bytes32)"(
    _who: PromiseOrValue<string>,
    _where: PromiseOrValue<string>,
    _what: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPermission(address,address,bytes32,uint256[])"(
    _who: PromiseOrValue<string>,
    _where: PromiseOrValue<string>,
    _what: PromiseOrValue<BytesLike>,
    _how: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Function called by apps to check ACL on kernel or to check permission statu
   * @param _how Permission parameters
   * @param _where Identifier for a group of actions in app
   * @param _who Sender of the original call
   * @returns boolean indicating whether the ACL allows the role or not
   */
  "hasPermission(address,address,bytes32,bytes)"(
    _who: PromiseOrValue<string>,
    _where: PromiseOrValue<string>,
    _what: PromiseOrValue<BytesLike>,
    _how: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<string>;

    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<string>;

    permissionParams(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber] & { id: number; op: number; value: BigNumber }
    >;

    appId(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<string>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes an ACL instance and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Creates a permission that wasn't previously set. Access is limited by the ACL.     If a created permission is removed it is possible to reset it with createPermission.
     * Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_app` (setting `_manager` as the permission manager)
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _manager Address of the entity that will be able to grant and revoke the permission further.
     * @param _role Identifier for the group of actions in app given access to perform
     */
    createPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Grants permission if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _params Permission parameters
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermissionP(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes permission if allowed. This requires `msg.sender` to be the the permission manager
     * Revokes `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be revoked
     * @param _entity Address of the whitelisted entity to revoke access from
     * @param _role Identifier for the group of actions in app being revoked
     */
    revokePermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets `_newManager` as the manager of the permission `_role` in `_app`
     * @param _app Address of the app in which the permission management is being transferred
     * @param _newManager Address for the new manager
     * @param _role Identifier for the group of actions being transferred
     */
    setPermissionManager(
      _newManager: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get manager for permission
     * @param _app Address of the app
     * @param _role Identifier for a group of actions in app
     * @returns address of the manager for the permission
     */
    getPermissionManager(
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "hasPermission(address,address,bytes32)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Function called by apps to check ACL on kernel or to check permission statu
     * @param _how Permission parameters
     * @param _where Identifier for a group of actions in app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    "hasPermission(address,address,bytes32,bytes)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "SetPermission(address,address,bytes32,bool)"(
      entity?: PromiseOrValue<string> | null,
      app?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null,
      allowed?: null
    ): SetPermissionEventFilter;
    SetPermission(
      entity?: PromiseOrValue<string> | null,
      app?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null,
      allowed?: null
    ): SetPermissionEventFilter;

    "ChangePermissionManager(address,bytes32,address)"(
      app?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null,
      manager?: PromiseOrValue<string> | null
    ): ChangePermissionManagerEventFilter;
    ChangePermissionManager(
      app?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BytesLike> | null,
      manager?: PromiseOrValue<string> | null
    ): ChangePermissionManagerEventFilter;
  };

  estimateGas: {
    CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EVMSCRIPT_REGISTRY_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    permissionParams(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    EVMSCRIPT_REGISTRY_APP(overrides?: CallOverrides): Promise<BigNumber>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes an ACL instance and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Creates a permission that wasn't previously set. Access is limited by the ACL.     If a created permission is removed it is possible to reset it with createPermission.
     * Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_app` (setting `_manager` as the permission manager)
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _manager Address of the entity that will be able to grant and revoke the permission further.
     * @param _role Identifier for the group of actions in app given access to perform
     */
    createPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Grants permission if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _params Permission parameters
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermissionP(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes permission if allowed. This requires `msg.sender` to be the the permission manager
     * Revokes `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be revoked
     * @param _entity Address of the whitelisted entity to revoke access from
     * @param _role Identifier for the group of actions in app being revoked
     */
    revokePermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Sets `_newManager` as the manager of the permission `_role` in `_app`
     * @param _app Address of the app in which the permission management is being transferred
     * @param _newManager Address for the new manager
     * @param _role Identifier for the group of actions being transferred
     */
    setPermissionManager(
      _newManager: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get manager for permission
     * @param _app Address of the app
     * @param _role Identifier for a group of actions in app
     * @returns address of the manager for the permission
     */
    getPermissionManager(
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPermission(address,address,bytes32)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Function called by apps to check ACL on kernel or to check permission statu
     * @param _how Permission parameters
     * @param _where Identifier for a group of actions in app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    "hasPermission(address,address,bytes32,bytes)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CREATE_PERMISSIONS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVMSCRIPT_REGISTRY_APP_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionParams(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * @returns Block number in which the contract was initialized
     */
    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVMSCRIPT_REGISTRY_APP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExecutor(
      _script: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Initialize can only be called once. It saves the block number in which it was initialized.
     * Initializes an ACL instance and sets `_permissionsCreator` as the entity that can create other permissions
     * @param _permissionsCreator Entity that will be given permission over createPermission
     */
    initialize(
      _permissionsCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Creates a permission that wasn't previously set. Access is limited by the ACL.     If a created permission is removed it is possible to reset it with createPermission.
     * Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_app` (setting `_manager` as the permission manager)
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _manager Address of the entity that will be able to grant and revoke the permission further.
     * @param _role Identifier for the group of actions in app given access to perform
     */
    createPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Grants permission if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager
     * Grants `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)
     * @param _entity Address of the whitelisted entity that will be able to perform the role
     * @param _params Permission parameters
     * @param _role Identifier for the group of actions in app given access to perform
     */
    grantPermissionP(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes permission if allowed. This requires `msg.sender` to be the the permission manager
     * Revokes `_entity` the ability to perform actions of role `_role` on `_app`
     * @param _app Address of the app in which the role will be revoked
     * @param _entity Address of the whitelisted entity to revoke access from
     * @param _role Identifier for the group of actions in app being revoked
     */
    revokePermission(
      _entity: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets `_newManager` as the manager of the permission `_role` in `_app`
     * @param _app Address of the app in which the permission management is being transferred
     * @param _newManager Address for the new manager
     * @param _role Identifier for the group of actions being transferred
     */
    setPermissionManager(
      _newManager: PromiseOrValue<string>,
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get manager for permission
     * @param _app Address of the app
     * @param _role Identifier for a group of actions in app
     * @returns address of the manager for the permission
     */
    getPermissionManager(
      _app: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPermission(address,address,bytes32)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Function called by apps to check ACL on kernel or to check permission statu
     * @param _how Permission parameters
     * @param _where Identifier for a group of actions in app
     * @param _who Sender of the original call
     * @returns boolean indicating whether the ACL allows the role or not
     */
    "hasPermission(address,address,bytes32,bytes)"(
      _who: PromiseOrValue<string>,
      _where: PromiseOrValue<string>,
      _what: PromiseOrValue<BytesLike>,
      _how: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
